{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Virgo Malware - Viaje al Ranswore de la Ciberseguridad","text":"<p>En un mundo digital cada vez m\u00e1s interconectado, la l\u00ednea que separa nuestra realidad virtual de la f\u00edsica se desvanece r\u00e1pidamente. Con cada clic, cada conexi\u00f3n, nos adentramos m\u00e1s en un territorio vasto y sin explorar, repleto de posibilidades infinitas. Pero, en las sombras de esta nueva frontera, acechan amenazas invisibles, fenomenos electicos que no se ven, preparadas para explotar la menor debilidad en nuestra armadura digital. Bienvenidos a mi blog, el epicentro de nuestra batalla colectiva contra estas fuerzas oscuras: el malware.</p> <p>Soy y3rb1t4, un profesional de la ciberseguridad con algunos years de experiencia en el frente de esta guerra invisible. A trav\u00e9s de este espacio, quiero llevarlos en un viaje al coraz\u00f3n de la seguridad inform\u00e1tica, desentra\u00f1ando los misterios del malware: desde virus y gusanos de tequila, hasta ransomware y spyware, y m\u00e1s all\u00e1.</p> <p>Este blog es m\u00e1s que una colecci\u00f3n de an\u00e1lisis t\u00e9cnicos y alertas de seguridad; es una comunidad para los guardianes de la red, los curiosos digitales, y todos aquellos que buscan comprender y proteger su vida en l\u00ednea. Aqu\u00ed, compartiremos conocimientos, exploraremos las \u00faltimas tendencias en ciberataques y aprenderemos juntos c\u00f3mo construir defensas m\u00e1s fuertes contra aquellos que buscan hacer da\u00f1o.</p> <p>Desde t\u00e9cnicas de ingenier\u00eda social hasta las complejidades de la criptograf\u00eda en la lucha contra el malware, abordaremos temas esenciales para cualquier entusiasta de la ciberseguridad o profesional en el campo. Pero m\u00e1s all\u00e1 de los bits y los bytes, reflexionaremos sobre el impacto humano de los ciberataques y c\u00f3mo, juntos, podemos forjar un futuro digital m\u00e1s seguro para todos.</p> <p>As\u00ed que, ya sea que est\u00e9s dando tus primeros pasos en el mundo de la ciberseguridad o seas un veterano en la materia, te invito a unirte a esta conversaci\u00f3n. Porque en la lucha contra el malware, el conocimiento es nuestra arma m\u00e1s poderosa, y la colaboraci\u00f3n, nuestro escudo m\u00e1s fuerte.</p> <p>Bienvenidos a la matrix. Bienvenidos a m4ld3v y3rb1t4.</p>"},{"location":"01-Principiante/","title":"Beginner","text":"<p>Coming Soon!</p>"},{"location":"01-Principiante/01%20-%20Intro/","title":"Introducci\u00f3n al desarrollo de malware","text":""},{"location":"01-Principiante/01%20-%20Intro/#que-es-el-malware","title":"\u00bfQu\u00e9 es el malware?","text":"<p>El malware es un tipo de software dise\u00f1ado espec\u00edficamente para realizar acciones maliciosas, como obtener acceso no autorizado a una m\u00e1quina o robar datos confidenciales de una m\u00e1quina. El t\u00e9rmino \"malware\" a menudo se asocia con conductas ilegales o delictivas, pero tambi\u00e9n puede ser utilizado por piratas inform\u00e1ticos \u00e9ticos, como pentesters y equipos de RedTeam, para una evaluaci\u00f3n de seguridad autorizada de una organizaci\u00f3n.</p>"},{"location":"01-Principiante/01%20-%20Intro/#por-que-aprender-a-desarrollar-malware","title":"\u00bfPor qu\u00e9 aprender a desarrollar malware?","text":"<p>Hay varias razones por las que alguien querr\u00eda aprender a desarrollar malware. Desde una perspectiva de seguridad ofensiva, los evaluadores a menudo necesitar\u00e1n realizar ciertas tareas maliciosas en el entorno de un cliente. Los evaluadores generalmente tienen tres opciones principales cuando se trata de los tipos de herramientas utilizadas en un compromiso:</p> <ol> <li> <p>Herramientas de c\u00f3digo abierto (OST): estas herramientas generalmente est\u00e1n firmadas por proveedores de seguridad y se detectan en cualquier organizaci\u00f3n madura o con una protecci\u00f3n decente. No siempre son confiables cuando realizan una evaluaci\u00f3n de seguridad ofensiva.</p> </li> <li> <p>Compra de herramientas: los equipos con presupuestos m\u00e1s grandes a menudo optar\u00e1n por comprar herramientas para ahorrar tiempo valioso durante las interacciones. Al igual que las herramientas personalizadas, estas generalmente son de c\u00f3digo cerrado y tienen m\u00e1s posibilidades de evadir las soluciones de seguridad.</p> </li> <li> <p>Desarrollo de herramientas personalizadas: debido a que estas herramientas est\u00e1n dise\u00f1adas a medida, no han sido analizadas ni firmadas por proveedores de seguridad, lo que le da al equipo atacante una ventaja en lo que respecta a la detecci\u00f3n. Aqu\u00ed es donde el conocimiento del desarrollo de malware se vuelve fundamental para una evaluaci\u00f3n de seguridad ofensiva m\u00e1s exitosa.</p> </li> </ol>"},{"location":"01-Principiante/01%20-%20Intro/#que-lenguaje-de-programacion-se-debe-utilizar","title":"\u00bfQu\u00e9 lenguaje de programaci\u00f3n se debe utilizar?","text":"<p>T\u00e9cnicamente hablando, se puede utilizar cualquier lenguaje de programaci\u00f3n para crear malware como Python, PowerShell, C#, C, C++ y Go. Dicho esto, existen algunas razones por las que algunos lenguajes de programaci\u00f3n prevalecen sobre otros cuando se trata de desarrollo de malware y, por lo general, se reduce a los siguientes puntos:</p> <ul> <li> <p>Ciertos lenguajes de programaci\u00f3n son m\u00e1s dif\u00edciles de aplicar mediante ingenier\u00eda inversa. Siempre debe ser parte del objetivo del atacante garantizar que los defensores tengan una comprensi\u00f3n limitada de c\u00f3mo se comporta el malware.</p> </li> <li> <p>Algunos lenguajes de programaci\u00f3n requieren requisitos previos en el sistema de destino. Por ejemplo, ejecutar un script de Python requiere un int\u00e9rprete presente en la m\u00e1quina de destino. Sin el int\u00e9rprete de Python presente en la m\u00e1quina, es imposible ejecutar malware basado en Python.</p> </li> <li> <p>Dependiendo del lenguaje de programaci\u00f3n, el tama\u00f1o del archivo generado ser\u00e1 diferente.</p> </li> </ul>"},{"location":"01-Principiante/01%20-%20Intro/#lenguajes-de-programacion-de-alto-nivel-versus-bajo-nivel","title":"Lenguajes de programaci\u00f3n de alto nivel versus bajo nivel","text":"<p>Los lenguajes de programaci\u00f3n se pueden clasificar en dos grupos diferentes, de alto nivel y de bajo nivel.</p> <ul> <li> <p>Alto nivel: generalmente m\u00e1s abstra\u00eddo del sistema operativo, menos eficiente con la memoria y proporciona al desarrollador menos control general debido a la abstracci\u00f3n de varias funciones complejas. Un ejemplo de lenguaje de programaci\u00f3n de alto nivel es Python.</p> </li> <li> <p>Bajo Nivel: proporciona una forma de interactuar con el sistema operativo a un nivel \u00edntimo y proporciona al desarrollador m\u00e1s libertad al interactuar con el sistema. Un ejemplo de lenguaje de programaci\u00f3n de bajo nivel es C.</p> </li> </ul> <p>Dadas las explicaciones anteriores, deber\u00eda quedar claro por qu\u00e9 los lenguajes de programaci\u00f3n de bajo nivel han sido la opci\u00f3n preferida en el desarrollo de malware, especialmente cuando se dirige a m\u00e1quinas con Windows.</p>"},{"location":"01-Principiante/01%20-%20Intro/#desarrollo-de-malware-para-windows","title":"Desarrollo de malware para Windows.","text":"<p>La escena del desarrollo de malware para Windows ha cambiado en los \u00faltimos a\u00f1os y ahora est\u00e1 muy centrada en evadir soluciones de seguridad basadas en host como Antivirus (AV) y Endpoint Detecci\u00f3n y Respuesta (EDR). Con el avance de la tecnolog\u00eda, ya no es suficiente crear malware que ejecute comandos sospechosos o realice acciones \"similares a malware\".</p>"},{"location":"01-Principiante/01%20-%20Intro/#ciclo-de-vida-del-desarrollo-de-malware","title":"Ciclo de vida del desarrollo de malware.","text":"<p>B\u00e1sicamente, el malware es un software dise\u00f1ado para realizar determinadas acciones. Las implementaciones de software exitosas requieren un proceso conocido como ciclo de vida de desarrollo de software (SDLC). De manera similar, un malware complejo y bien construido requerir\u00e1 una versi\u00f3n personalizada del SDLC denominada Ciclo de vida de desarrollo de malware (MDLC).</p> <p>Desarrollo: comience el desarrollo o perfeccionamiento de la funcionalidad dentro del malware.</p> <p>Pruebas: realice pruebas para descubrir errores ocultos dentro del c\u00f3digo desarrollado hasta ahora.</p> <p>Pruebas AV/EDR sin conexi\u00f3n: ejecute el malware desarrollado contra tantos productos de seguridad como sea posible. Es importante que las pruebas se realicen fuera de l\u00ednea para garantizar que no se env\u00eden muestras a los proveedores de seguridad. Con Microsoft Defender, esto se logra deshabilitando los env\u00edos automatizados de muestras y la opci\u00f3n de protecci\u00f3n entregada en la nube.</p> <p>Pruebas AV/EDR en l\u00ednea: ejecute el malware desarrollado contra los productos de seguridad con conectividad a Internet. Los motores en la nube suelen ser componentes clave en los AV/EDR y, por lo tanto, probar su malware contra estos componentes es crucial para obtener resultados m\u00e1s precisos. Tenga cuidado, ya que este paso puede provocar que se env\u00eden muestras al motor en la nube de la soluci\u00f3n de seguridad.</p> <p>An\u00e1lisis de IoC (indicadores de compromiso): en esta etapa, usted se convierte en el cazador de amenazas o analista de malware. Analice el malware y extraiga los IoC que potencialmente puedan usarse para detectar o firmar el malware.</p>"},{"location":"01-Principiante/02%20-%20Windows%20Architecture/","title":"02   Windows Architecture","text":""},{"location":"01-Principiante/02%20-%20Windows%20Architecture/#introduccion","title":"Introducci\u00f3n","text":"<p>Este m\u00f3dulo detalla la arquitectura de Windows y los procesos internos que ocurren en las aplicaciones y procesos de Windows.</p>"},{"location":"01-Principiante/02%20-%20Windows%20Architecture/#arquitectura-de-windows","title":"Arquitectura de Windows","text":"<p>Un procesador en una m\u00e1quina que ejecuta el sistema operativo Windows puede operar bajo dos modos distintos: Modo Usuario y Modo Kernel. Las aplicaciones se ejecutan en modo usuario, mientras que los componentes del sistema operativo operan en modo kernel. Cuando una aplicaci\u00f3n necesita realizar una tarea, como crear un archivo, no puede hacerlo por s\u00ed misma. La \u00fanica entidad capaz de completar la tarea es el kernel, por lo que las aplicaciones deben seguir un flujo espec\u00edfico de llamadas a funciones. El diagrama a continuaci\u00f3n muestra un nivel alto de este flujo.</p> <p>![[Pasted image 20240424014105.png]]</p> <ul> <li> <p>Procesos de Usuario - Un programa o aplicaci\u00f3n ejecutado por el usuario, como el Bloc de notas, Google Chrome o Microsoft Word.</p> </li> <li> <p>DLLs de Subsistemas - DLLs que contienen funciones de la API que son llamadas por los procesos de usuario. Un ejemplo de esto ser\u00eda kernel32.dll, que exporta la funci\u00f3n de la API de Windows CreateFile (WinAPI). Otras DLLs comunes de subsistemas incluyen ntdll.dll, advapi32.dll y user32.dll.</p> </li> <li> <p>Ntdll.dll - Una DLL de \u00e1mbito sist\u00e9mico que es la capa m\u00e1s baja disponible en modo usuario. Esta es una DLL especial que crea la transici\u00f3n del modo usuario al modo kernel. A menudo se le refiere como la API Nativa o NTAPI.</p> </li> <li> <p>Kernel Ejecutivo - Esto es lo que se conoce como el Kernel de Windows y llama a otros controladores y m\u00f3dulos disponibles dentro del modo kernel para completar tareas. El kernel de Windows est\u00e1 parcialmente almacenado en un archivo llamado ntoskrnl.exe en \"C:\\Windows\\System32\".</p> </li> </ul>"},{"location":"01-Principiante/Intro/","title":"Introducci\u00f3n al desarrollo de malware","text":""},{"location":"01-Principiante/Intro/#que-es-el-malware","title":"\u00bfQu\u00e9 es el malware?","text":"<p>El malware es un tipo de software dise\u00f1ado espec\u00edficamente para realizar acciones maliciosas, como obtener acceso no autorizado a una m\u00e1quina o robar datos confidenciales de una m\u00e1quina. El t\u00e9rmino \"malware\" a menudo se asocia con conductas ilegales o delictivas, pero tambi\u00e9n puede ser utilizado por piratas inform\u00e1ticos \u00e9ticos, como pentesters y equipos de RedTeam, para una evaluaci\u00f3n de seguridad autorizada de una organizaci\u00f3n.</p>"},{"location":"01-Principiante/Intro/#por-que-aprender-a-desarrollar-malware","title":"\u00bfPor qu\u00e9 aprender a desarrollar malware?","text":"<p>Hay varias razones por las que alguien querr\u00eda aprender a desarrollar malware. Desde una perspectiva de seguridad ofensiva, los evaluadores a menudo necesitar\u00e1n realizar ciertas tareas maliciosas en el entorno de un cliente. Los evaluadores generalmente tienen tres opciones principales cuando se trata de los tipos de herramientas utilizadas en un compromiso:</p> <ol> <li> <p>Herramientas de c\u00f3digo abierto (OST): estas herramientas generalmente est\u00e1n firmadas por proveedores de seguridad y se detectan en cualquier organizaci\u00f3n madura o con una protecci\u00f3n decente. No siempre son confiables cuando realizan una evaluaci\u00f3n de seguridad ofensiva.</p> </li> <li> <p>Compra de herramientas: los equipos con presupuestos m\u00e1s grandes a menudo optar\u00e1n por comprar herramientas para ahorrar tiempo valioso durante las interacciones. Al igual que las herramientas personalizadas, estas generalmente son de c\u00f3digo cerrado y tienen m\u00e1s posibilidades de evadir las soluciones de seguridad.</p> </li> <li> <p>Desarrollo de herramientas personalizadas: debido a que estas herramientas est\u00e1n dise\u00f1adas a medida, no han sido analizadas ni firmadas por proveedores de seguridad, lo que le da al equipo atacante una ventaja en lo que respecta a la detecci\u00f3n. Aqu\u00ed es donde el conocimiento del desarrollo de malware se vuelve fundamental para una evaluaci\u00f3n de seguridad ofensiva m\u00e1s exitosa.</p> </li> </ol>"},{"location":"01-Principiante/Intro/#que-lenguaje-de-programacion-se-debe-utilizar","title":"\u00bfQu\u00e9 lenguaje de programaci\u00f3n se debe utilizar?","text":"<p>T\u00e9cnicamente hablando, se puede utilizar cualquier lenguaje de programaci\u00f3n para crear malware como Python, PowerShell, C#, C, C++ y Go. Dicho esto, existen algunas razones por las que algunos lenguajes de programaci\u00f3n prevalecen sobre otros cuando se trata de desarrollo de malware y, por lo general, se reduce a los siguientes puntos:</p> <ul> <li> <p>Ciertos lenguajes de programaci\u00f3n son m\u00e1s dif\u00edciles de aplicar mediante ingenier\u00eda inversa. Siempre debe ser parte del objetivo del atacante garantizar que los defensores tengan una comprensi\u00f3n limitada de c\u00f3mo se comporta el malware.</p> </li> <li> <p>Algunos lenguajes de programaci\u00f3n requieren requisitos previos en el sistema de destino. Por ejemplo, ejecutar un script de Python requiere un int\u00e9rprete presente en la m\u00e1quina de destino. Sin el int\u00e9rprete de Python presente en la m\u00e1quina, es imposible ejecutar malware basado en Python.</p> </li> <li> <p>Dependiendo del lenguaje de programaci\u00f3n, el tama\u00f1o del archivo generado ser\u00e1 diferente.</p> </li> </ul>"},{"location":"01-Principiante/Intro/#lenguajes-de-programacion-de-alto-nivel-versus-bajo-nivel","title":"Lenguajes de programaci\u00f3n de alto nivel versus bajo nivel","text":"<p>Los lenguajes de programaci\u00f3n se pueden clasificar en dos grupos diferentes, de alto nivel y de bajo nivel.</p> <ul> <li> <p>Alto nivel: generalmente m\u00e1s abstra\u00eddo del sistema operativo, menos eficiente con la memoria y proporciona al desarrollador menos control general debido a la abstracci\u00f3n de varias funciones complejas. Un ejemplo de lenguaje de programaci\u00f3n de alto nivel es Python.</p> </li> <li> <p>Bajo Nivel: proporciona una forma de interactuar con el sistema operativo a un nivel \u00edntimo y proporciona al desarrollador m\u00e1s libertad al interactuar con el sistema. Un ejemplo de lenguaje de programaci\u00f3n de bajo nivel es C.</p> </li> </ul> <p>Dadas las explicaciones anteriores, deber\u00eda quedar claro por qu\u00e9 los lenguajes de programaci\u00f3n de bajo nivel han sido la opci\u00f3n preferida en el desarrollo de malware, especialmente cuando se dirige a m\u00e1quinas con Windows.</p>"},{"location":"01-Principiante/Intro/#desarrollo-de-malware-para-windows","title":"Desarrollo de malware para Windows.","text":"<p>La escena del desarrollo de malware para Windows ha cambiado en los \u00faltimos a\u00f1os y ahora est\u00e1 muy centrada en evadir soluciones de seguridad basadas en host como Antivirus (AV) y Endpoint Detecci\u00f3n y Respuesta (EDR). Con el avance de la tecnolog\u00eda, ya no es suficiente crear malware que ejecute comandos sospechosos o realice acciones \"similares a malware\".</p>"},{"location":"01-Principiante/Intro/#ciclo-de-vida-del-desarrollo-de-malware","title":"Ciclo de vida del desarrollo de malware.","text":"<p>B\u00e1sicamente, el malware es un software dise\u00f1ado para realizar determinadas acciones. Las implementaciones de software exitosas requieren un proceso conocido como ciclo de vida de desarrollo de software (SDLC). De manera similar, un malware complejo y bien construido requerir\u00e1 una versi\u00f3n personalizada del SDLC denominada Ciclo de vida de desarrollo de malware (MDLC).</p> <p>Desarrollo: comience el desarrollo o perfeccionamiento de la funcionalidad dentro del malware.</p> <p>Pruebas: realice pruebas para descubrir errores ocultos dentro del c\u00f3digo desarrollado hasta ahora.</p> <p>Pruebas AV/EDR sin conexi\u00f3n: ejecute el malware desarrollado contra tantos productos de seguridad como sea posible. Es importante que las pruebas se realicen fuera de l\u00ednea para garantizar que no se env\u00eden muestras a los proveedores de seguridad. Con Microsoft Defender, esto se logra deshabilitando los env\u00edos automatizados de muestras y la opci\u00f3n de protecci\u00f3n entregada en la nube.</p> <p>Pruebas AV/EDR en l\u00ednea: ejecute el malware desarrollado contra los productos de seguridad con conectividad a Internet. Los motores en la nube suelen ser componentes clave en los AV/EDR y, por lo tanto, probar su malware contra estos componentes es crucial para obtener resultados m\u00e1s precisos. Tenga cuidado, ya que este paso puede provocar que se env\u00eden muestras al motor en la nube de la soluci\u00f3n de seguridad.</p> <p>An\u00e1lisis de IoC (indicadores de compromiso): en esta etapa, usted se convierte en el cazador de amenazas o analista de malware. Analice el malware y extraiga los IoC que potencialmente puedan usarse para detectar o firmar el malware.</p>"},{"location":"Intermedio/","title":"Intermediate","text":"<p>Coming Soon!</p>"}]}